import telebot
import requests

bot = telebot.TeleBot('7959072655:AAEdgr5Qz1DrvMIUSO76n8jixqTFcs01qAQ')


user_data = {}
schedule_data = {}


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è –∏ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ü—Ä–∏–º–µ—Ä: –ú–∞–Ω—Å—É—Ä 2010)")


@bot.message_handler(commands=['info'])
def get_info(message):
    user_id = message.chat.id
    if user_id in user_data:
        name = user_data[user_id]["name"]
        student_id = user_data[user_id]["student_id"]
        bot.send_message(message.chat.id, f"–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {name}\nID: {student_id}")
    else:
        bot.send_message(message.chat.id, "–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ. –í–≤–µ–¥–∏ –∏–º—è –∏ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")


@bot.message_handler(commands=['add_schedule'])
def add_schedule(message):
    user_id = message.chat.id
    text = message.text.split(" ", 3)
    if len(text) < 4:
        bot.send_message(message.chat.id,
                         "–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /add_schedule [–¥–µ–Ω—å] [–≤—Ä–µ–º—è] [–ø—Ä–µ–¥–º–µ—Ç]\n–ü—Ä–∏–º–µ—Ä: /add_schedule –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 10:00 –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
        return
    day, time, subject = text[1], text[2], text[3]
    if user_id not in schedule_data:
        schedule_data[user_id] = []
    schedule_data[user_id].append((day, time, subject))
    bot.send_message(message.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–µ: {day} {time} - {subject}")


@bot.message_handler(commands=['my_schedule'])
def my_schedule(message):
    user_id = message.chat.id
    if user_id in schedule_data and schedule_data[user_id]:
        schedule_text = "–¢–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n" + "\n".join([f"{d} {t} - {s}" for d, t, s in schedule_data[user_id]])
        bot.send_message(message.chat.id, schedule_text)
    else:
        bot.send_message(message.chat.id, "–¢–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ. –î–æ–±–∞–≤—å –∑–∞–Ω—è—Ç–∏—è —Å –ø–æ–º–æ—â—å—é /add_schedule")


@bot.message_handler(commands=['delete_schedule'])
def delete_schedule(message):
    user_id = message.chat.id
    text = message.text.split(" ", 2)
    if len(text) < 3:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_schedule [–¥–µ–Ω—å] [–≤—Ä–µ–º—è]")
        return
    day, time = text[1], text[2]
    if user_id in schedule_data:
        schedule_data[user_id] = [entry for entry in schedule_data[user_id] if
                                  not (entry[0] == day and entry[1] == time)]
        bot.send_message(message.chat.id, "–ó–∞–Ω—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ.")
    else:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")


@bot.message_handler(commands=['random_fact'])
def random_fact(message):
    try:
        url = "https://ru.wikipedia.org/api/rest_v1/page/random/summary"
        response = requests.get(url)
        data = response.json()
        title = data["title"]
        extract = data["extract"]
        page_url = f"https://ru.wikipedia.org/wiki/{title.replace(' ', '_')}"

        fact_message = f"üß† **–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç:**\n\nüìå *{title}*\n{extract}\n\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: [–í–∏–∫–∏–ø–µ–¥–∏—è]({page_url})"
        bot.send_message(message.chat.id, fact_message, parse_mode="Markdown", disable_web_page_preview=True)
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")


@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id,
                     "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —É—á–µ–±–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å\n/info - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n/add_schedule [–¥–µ–Ω—å] [–≤—Ä–µ–º—è] [–ø—Ä–µ–¥–º–µ—Ç] - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n/my_schedule - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n/delete_schedule [–¥–µ–Ω—å] [–≤—Ä–µ–º—è] - –£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ\n/random_fact - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç\n/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")


@bot.message_handler(func=lambda message: True)
def save_user_data(message):
    user_id = message.chat.id
    text = message.text.split(" ", 1)
    if len(text) < 2:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∏–º—è –∏ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return
    name, student_id = text
    user_data[user_id] = {"name": name, "student_id": student_id}
    bot.send_message(message.chat.id, f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n–ò–º—è: {name}\nID: {student_id}")


print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling(none_stop=True)
