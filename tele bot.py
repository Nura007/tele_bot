import telebot
import requests
import sqlite3

bot = telebot.TeleBot('7959072655:AAEdgr5Qz1DrvMIUSO76n8jixqTFcs01qAQ')

user_data = {}
schedule_data = {}

conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    name TEXT,
    student_id TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS schedule (
    user_id INTEGER,
    day TEXT,
    time TEXT,
    subject TEXT,
    PRIMARY KEY (user_id, day, time),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
)
''')

conn.commit()


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è –∏ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ü—Ä–∏–º–µ—Ä: –ú–∞–Ω—Å—É—Ä 2010)")


@bot.message_handler(commands=['info'])
def get_info(message):
    user_id = message.chat.id
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT name, student_id FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()

    if result:
        name, student_id = result
        bot.send_message(message.chat.id, f"–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {name}\nID: {student_id}")
    else:
        bot.send_message(message.chat.id, "–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ. –í–≤–µ–¥–∏ –∏–º—è –∏ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")


@bot.message_handler(commands=['add_schedule'])
def add_schedule(message):
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        _, day, time, subject = message.text.split(' ', 3)
        user_id = message.chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è
        cursor.execute("SELECT * FROM schedule WHERE user_id = ? AND day = ? AND time = ?",
                       (user_id, day, time))
        existing_schedule = cursor.fetchone()

        if existing_schedule:
            bot.send_message(message.chat.id, f"–ó–∞–Ω—è—Ç–∏–µ –≤ {time} –≤ –¥–µ–Ω—å {day} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            cursor.execute("INSERT INTO schedule (user_id, day, time, subject) VALUES (?, ?, ?, ?)",
                           (user_id, day, time, subject))
            conn.commit()
            bot.send_message(message.chat.id, f"–ó–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {subject} –≤ {time} –≤ –¥–µ–Ω—å {day}.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /add_schedule [–¥–µ–Ω—å] [–≤—Ä–µ–º—è] [–ø—Ä–µ–¥–º–µ—Ç]")


@bot.message_handler(commands=['my_schedule'])
def my_schedule(message):
    user_id = message.chat.id
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT day, time, subject FROM schedule WHERE user_id = ?", (user_id,))
    results = cursor.fetchall()

    if results:
        schedule_msg = "–¢–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
        for day, time, subject in results:
            schedule_msg += f"{day} - {time}: {subject}\n"
        bot.send_message(message.chat.id, schedule_msg)
    else:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –î–æ–±–∞–≤—å –µ–≥–æ —Å –ø–æ–º–æ—â—å—é /add_schedule.")


@bot.message_handler(commands=['delete_schedule'])
def delete_schedule(message):
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        _, day, time = message.text.split(' ', 2)
        user_id = message.chat.id
        # –£–¥–∞–ª—è–µ–º –∑–∞–Ω—è—Ç–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("DELETE FROM schedule WHERE user_id = ? AND day = ? AND time = ?",
                       (user_id, day, time))
        conn.commit()
        bot.send_message(message.chat.id, f"–ó–∞–Ω—è—Ç–∏–µ –≤ {time} –≤ –¥–µ–Ω—å {day} —É–¥–∞–ª–µ–Ω–æ.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /delete_schedule [–¥–µ–Ω—å] [–≤—Ä–µ–º—è]")


@bot.message_handler(commands=['random_fact'])
def random_fact(message):
    try:
        url = "https://ru.wikipedia.org/api/rest_v1/page/random/summary"
        response = requests.get(url)
        data = response.json()
        title = data["title"]
        extract = data["extract"]
        page_url = f"https://ru.wikipedia.org/wiki/{title.replace(' ', '_')}"

        fact_message = f"üß† **–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç:**\n\nüìå *{title}*\n{extract}\n\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: [–í–∏–∫–∏–ø–µ–¥–∏—è]({page_url})"
        bot.send_message(message.chat.id, fact_message, parse_mode="Markdown", disable_web_page_preview=True)
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")


@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id,
                     "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —É—á–µ–±–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å\n/info - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n/add_schedule [–¥–µ–Ω—å] [–≤—Ä–µ–º—è] [–ø—Ä–µ–¥–º–µ—Ç] - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n/my_schedule - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n/delete_schedule [–¥–µ–Ω—å] [–≤—Ä–µ–º—è] - –£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ\n/random_fact - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç\n/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")


@bot.message_handler(func=lambda message: True)
def save_user_data(message):
    try:
        name, student_id = message.text.split()
        user_id = message.chat.id
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("INSERT OR REPLACE INTO users (user_id, name, student_id) VALUES (?, ?, ?)",
                       (user_id, name, student_id))
        conn.commit()
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")


print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling(none_stop=True)